name: continuous-intergration/windows

on:
  push:
    tags:
      - v*
    paths-ignore:
      - 'README.md'

jobs:
  check:
    name: build-windows
    strategy:
      matrix:
        platform:
          - windows-latest
        toolchain:
          - nightly
    runs-on: ${{ matrix.platform }}
    env:
      RUST_BACKTRACE: full
    steps:
      # Required for `CI_REF_NAME`
      - name: Add GitHub Environment Variables
        uses: FranzDiebold/github-env-vars-action@v2

      # Required for `librocksb-sys`
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@latest
        if: matrix.platform == 'windows-latest'
        with:
          version: "12.0.1"
          directory: ${{ runner.temp }}/llvm

      # Required for `librocksb-sys`
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.platform == 'windows-latest'

      - name: Install toolchain
        uses: actions-rs/toolchain@master
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: rust-src
          target: wasm32-unknown-unknown
          override: true

      - name: Checkout sources & submodules
        uses: actions/checkout@master
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.2.0

      - name: Build windows binary on ${{ matrix.platform }}-${{ matrix.toolchain }}
        run: |
          cargo -vV
          cargo build --release

      - name: Test canvas binary works
        run: |
         ./target/release/canvas --version

      - name: Check if release already exists
        id: check-exists
        run: |
          curl -s https://api.github.com/repos/paritytech/canvas-node/releases `
            -H "Cookie: logged_in=no" `
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
          | jq -r '[.[].tag_name] | any(. == \"${{ Env.CI_REF_NAME }}\")'
          $exists = (curl -s https://api.github.com/repos/paritytech/canvas-node/releases `
            -H "Cookie: logged_in=no" `
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
            | jq -r '[.[].tag_name] | any(. == \"${{ Env.CI_REF_NAME }}\")')
          echo $exists
          Write-Output "::set-output name=EXISTS::$exists"

      - name: Create release from tag, if necessary
        if: steps.check-exists.outputs.EXISTS == 'false'
        uses: marvinpinto/action-automatic-releases@latest
        # Creating a release might fail, since there is a GitLab job which
        # does the same thing for Linux & Mac binaries. This GitLab job
        # might already have created the release.
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ Env.CI_REF_NAME }}
          prerelease: false
          draft: true
          title: ${{ Env.CI_REF_NAME }}

      - name: Fetch release id
        id: fetch-id
        run: |
          $release_id = (curl -s https://api.github.com/repos/paritytech/canvas-node/releases `
            -H "Cookie: logged_in=no" `
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
          | jq -r '.[] | select(.tag_name == \"${{ Env.CI_REF_NAME }}\") | .id')
          echo $release_id
          Write-Output "::set-output name=RELEASE_ID::$release_id"

      - name: Upload windows binary as release asset
        run: |
          $URI = -join("https://uploads.github.com/repos/paritytech/canvas-node/releases/", "${{ steps.fetch-id.outputs.RELEASE_ID }}", "/assets?name=canvas.exe");
          echo $URI
          curl -X "POST" $URI  `
            --fail-early `
            -H "Cookie: logged_in=no" `
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
            -H "Content-Type: application/octet-stream" `
            -d "@target/release/canvas.exe"
